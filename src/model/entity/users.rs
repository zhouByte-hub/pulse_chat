//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use super::sea_orm_active_enums::Status;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u64,
    #[sea_orm(unique)]
    pub username: String,
    #[sea_orm(unique)]
    pub email: String,
    pub password_hash: String,
    pub nickname: Option<String>,
    pub avatar: Option<String>,
    pub phone: Option<String>,
    pub description: Option<String>,
    pub address: Option<String>,
    pub status: Option<Status>,
    pub created_at: Option<DateTimeUtc>,
    pub updated_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::conversations::Entity")]
    Conversations,
    #[sea_orm(has_many = "super::group_members::Entity")]
    GroupMembers,
    #[sea_orm(has_many = "super::group_messages::Entity")]
    GroupMessages,
    #[sea_orm(has_many = "super::pulse_group::Entity")]
    PulseGroup,
}

impl Related<super::conversations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Conversations.def()
    }
}

impl Related<super::group_members::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupMembers.def()
    }
}

impl Related<super::group_messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupMessages.def()
    }
}

impl Related<super::pulse_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PulseGroup.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
